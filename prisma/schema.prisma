// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid())
  title    String
  slug     String    @unique
  active   Boolean  @default(false)
  products Product[]

  created_at DateTime @default(now())
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  img         String?
  price       Decimal
  isFeatured  Boolean  @default(false)
  options     Json[]
  catSlug     String
  category    Category @relation(fields: [catSlug], references: [slug])
  offer   Offer? 

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Status {
  id    String  @id @default(uuid())
  title String  @unique
  order Order[]
}

model Order {
  id                   String   @id @default(uuid())
  price                Decimal
  products             Json[]
  status               Status   @relation(fields: [statusTitle], references: [title])
  statusTitle          String
  intent_id            String?  @unique
  user                 User     @relation(fields: [userEmail], references: [email])
  userEmail            String
  name                 String?
  phone                String?
  isPaymentUponReceipt Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Slider{
  id String @id @default(uuid())
  title String
  description String
  img String?
}
model Offer{
  id String @id @default(uuid())
  title String
  description String
  img String?
  date DateTime?
  product Product @relation(fields: [product_id],references: [id])
  product_id String @unique
}
model Message{
  id String @id @default(uuid())
  title String
}
